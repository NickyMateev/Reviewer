// Code generated by counterfeiter. DO NOT EDIT.
package webfakes

import (
	"sync"

	"github.com/NickyMateev/Reviewer/web"
)

type FakeAPI struct {
	ControllersStub        func() []web.Controller
	controllersMutex       sync.RWMutex
	controllersArgsForCall []struct {
	}
	controllersReturns struct {
		result1 []web.Controller
	}
	controllersReturnsOnCall map[int]struct {
		result1 []web.Controller
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) Controllers() []web.Controller {
	fake.controllersMutex.Lock()
	ret, specificReturn := fake.controllersReturnsOnCall[len(fake.controllersArgsForCall)]
	fake.controllersArgsForCall = append(fake.controllersArgsForCall, struct {
	}{})
	fake.recordInvocation("Controllers", []interface{}{})
	fake.controllersMutex.Unlock()
	if fake.ControllersStub != nil {
		return fake.ControllersStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.controllersReturns
	return fakeReturns.result1
}

func (fake *FakeAPI) ControllersCallCount() int {
	fake.controllersMutex.RLock()
	defer fake.controllersMutex.RUnlock()
	return len(fake.controllersArgsForCall)
}

func (fake *FakeAPI) ControllersCalls(stub func() []web.Controller) {
	fake.controllersMutex.Lock()
	defer fake.controllersMutex.Unlock()
	fake.ControllersStub = stub
}

func (fake *FakeAPI) ControllersReturns(result1 []web.Controller) {
	fake.controllersMutex.Lock()
	defer fake.controllersMutex.Unlock()
	fake.ControllersStub = nil
	fake.controllersReturns = struct {
		result1 []web.Controller
	}{result1}
}

func (fake *FakeAPI) ControllersReturnsOnCall(i int, result1 []web.Controller) {
	fake.controllersMutex.Lock()
	defer fake.controllersMutex.Unlock()
	fake.ControllersStub = nil
	if fake.controllersReturnsOnCall == nil {
		fake.controllersReturnsOnCall = make(map[int]struct {
			result1 []web.Controller
		})
	}
	fake.controllersReturnsOnCall[i] = struct {
		result1 []web.Controller
	}{result1}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.controllersMutex.RLock()
	defer fake.controllersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ web.API = new(FakeAPI)
