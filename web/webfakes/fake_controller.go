// Code generated by counterfeiter. DO NOT EDIT.
package webfakes

import (
	"sync"

	"github.com/NickyMateev/Reviewer/web"
)

type FakeController struct {
	RoutesStub        func() []web.Route
	routesMutex       sync.RWMutex
	routesArgsForCall []struct {
	}
	routesReturns struct {
		result1 []web.Route
	}
	routesReturnsOnCall map[int]struct {
		result1 []web.Route
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeController) Routes() []web.Route {
	fake.routesMutex.Lock()
	ret, specificReturn := fake.routesReturnsOnCall[len(fake.routesArgsForCall)]
	fake.routesArgsForCall = append(fake.routesArgsForCall, struct {
	}{})
	fake.recordInvocation("Routes", []interface{}{})
	fake.routesMutex.Unlock()
	if fake.RoutesStub != nil {
		return fake.RoutesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.routesReturns
	return fakeReturns.result1
}

func (fake *FakeController) RoutesCallCount() int {
	fake.routesMutex.RLock()
	defer fake.routesMutex.RUnlock()
	return len(fake.routesArgsForCall)
}

func (fake *FakeController) RoutesCalls(stub func() []web.Route) {
	fake.routesMutex.Lock()
	defer fake.routesMutex.Unlock()
	fake.RoutesStub = stub
}

func (fake *FakeController) RoutesReturns(result1 []web.Route) {
	fake.routesMutex.Lock()
	defer fake.routesMutex.Unlock()
	fake.RoutesStub = nil
	fake.routesReturns = struct {
		result1 []web.Route
	}{result1}
}

func (fake *FakeController) RoutesReturnsOnCall(i int, result1 []web.Route) {
	fake.routesMutex.Lock()
	defer fake.routesMutex.Unlock()
	fake.RoutesStub = nil
	if fake.routesReturnsOnCall == nil {
		fake.routesReturnsOnCall = make(map[int]struct {
			result1 []web.Route
		})
	}
	fake.routesReturnsOnCall[i] = struct {
		result1 []web.Route
	}{result1}
}

func (fake *FakeController) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.routesMutex.RLock()
	defer fake.routesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeController) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ web.Controller = new(FakeController)
