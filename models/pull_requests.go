// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PullRequest is an object representing the database table.
type PullRequest struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Title     string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	URL       string    `boil:"url" json:"url" toml:"url" yaml:"url"`
	Number    int64     `boil:"number" json:"number" toml:"number" yaml:"number"`
	GithubID  int64     `boil:"github_id" json:"github_id" toml:"github_id" yaml:"github_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *pullRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pullRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PullRequestColumns = struct {
	ID        string
	UserID    string
	Title     string
	URL       string
	Number    string
	GithubID  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	Title:     "title",
	URL:       "url",
	Number:    "number",
	GithubID:  "github_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PullRequestWhere = struct {
	ID        whereHelperint64
	UserID    whereHelperint64
	Title     whereHelperstring
	URL       whereHelperstring
	Number    whereHelperint64
	GithubID  whereHelperint64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: `id`},
	UserID:    whereHelperint64{field: `user_id`},
	Title:     whereHelperstring{field: `title`},
	URL:       whereHelperstring{field: `url`},
	Number:    whereHelperint64{field: `number`},
	GithubID:  whereHelperint64{field: `github_id`},
	CreatedAt: whereHelpertime_Time{field: `created_at`},
	UpdatedAt: whereHelpertime_Time{field: `updated_at`},
}

// PullRequestRels is where relationship names are stored.
var PullRequestRels = struct {
	Author     string
	Approvers  string
	Commenters string
	Idlers     string
	Reviewers  string
}{
	Author:     "Author",
	Approvers:  "Approvers",
	Commenters: "Commenters",
	Idlers:     "Idlers",
	Reviewers:  "Reviewers",
}

// pullRequestR is where relationships are stored.
type pullRequestR struct {
	Author     *User
	Approvers  UserSlice
	Commenters UserSlice
	Idlers     UserSlice
	Reviewers  UserSlice
}

// NewStruct creates a new relationship struct
func (*pullRequestR) NewStruct() *pullRequestR {
	return &pullRequestR{}
}

// pullRequestL is where Load methods for each relationship are stored.
type pullRequestL struct{}

var (
	pullRequestColumns               = []string{"id", "user_id", "title", "url", "number", "github_id", "created_at", "updated_at"}
	pullRequestColumnsWithoutDefault = []string{"user_id", "title", "url", "number", "github_id"}
	pullRequestColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	pullRequestPrimaryKeyColumns     = []string{"id"}
)

type (
	// PullRequestSlice is an alias for a slice of pointers to PullRequest.
	// This should generally be used opposed to []PullRequest.
	PullRequestSlice []*PullRequest
	// PullRequestHook is the signature for custom PullRequest hook methods
	PullRequestHook func(context.Context, boil.ContextExecutor, *PullRequest) error

	pullRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pullRequestType                 = reflect.TypeOf(&PullRequest{})
	pullRequestMapping              = queries.MakeStructMapping(pullRequestType)
	pullRequestPrimaryKeyMapping, _ = queries.BindMapping(pullRequestType, pullRequestMapping, pullRequestPrimaryKeyColumns)
	pullRequestInsertCacheMut       sync.RWMutex
	pullRequestInsertCache          = make(map[string]insertCache)
	pullRequestUpdateCacheMut       sync.RWMutex
	pullRequestUpdateCache          = make(map[string]updateCache)
	pullRequestUpsertCacheMut       sync.RWMutex
	pullRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pullRequestBeforeInsertHooks []PullRequestHook
var pullRequestBeforeUpdateHooks []PullRequestHook
var pullRequestBeforeDeleteHooks []PullRequestHook
var pullRequestBeforeUpsertHooks []PullRequestHook

var pullRequestAfterInsertHooks []PullRequestHook
var pullRequestAfterSelectHooks []PullRequestHook
var pullRequestAfterUpdateHooks []PullRequestHook
var pullRequestAfterDeleteHooks []PullRequestHook
var pullRequestAfterUpsertHooks []PullRequestHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PullRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pullRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PullRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pullRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PullRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pullRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PullRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pullRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PullRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pullRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PullRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pullRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PullRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pullRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PullRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pullRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PullRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pullRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPullRequestHook registers your hook function for all future operations.
func AddPullRequestHook(hookPoint boil.HookPoint, pullRequestHook PullRequestHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		pullRequestBeforeInsertHooks = append(pullRequestBeforeInsertHooks, pullRequestHook)
	case boil.BeforeUpdateHook:
		pullRequestBeforeUpdateHooks = append(pullRequestBeforeUpdateHooks, pullRequestHook)
	case boil.BeforeDeleteHook:
		pullRequestBeforeDeleteHooks = append(pullRequestBeforeDeleteHooks, pullRequestHook)
	case boil.BeforeUpsertHook:
		pullRequestBeforeUpsertHooks = append(pullRequestBeforeUpsertHooks, pullRequestHook)
	case boil.AfterInsertHook:
		pullRequestAfterInsertHooks = append(pullRequestAfterInsertHooks, pullRequestHook)
	case boil.AfterSelectHook:
		pullRequestAfterSelectHooks = append(pullRequestAfterSelectHooks, pullRequestHook)
	case boil.AfterUpdateHook:
		pullRequestAfterUpdateHooks = append(pullRequestAfterUpdateHooks, pullRequestHook)
	case boil.AfterDeleteHook:
		pullRequestAfterDeleteHooks = append(pullRequestAfterDeleteHooks, pullRequestHook)
	case boil.AfterUpsertHook:
		pullRequestAfterUpsertHooks = append(pullRequestAfterUpsertHooks, pullRequestHook)
	}
}

// One returns a single pullRequest record from the query.
func (q pullRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PullRequest, error) {
	o := &PullRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pull_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PullRequest records from the query.
func (q pullRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (PullRequestSlice, error) {
	var o []*PullRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PullRequest slice")
	}

	if len(pullRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PullRequest records in the query.
func (q pullRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pull_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pullRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pull_requests exists")
	}

	return count > 0, nil
}

// Author pointed to by the foreign key.
func (o *PullRequest) Author(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Approvers retrieves all the user's Users with an executor via id column.
func (o *PullRequest) Approvers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"approvers\" on \"users\".\"id\" = \"approvers\".\"user_id\""),
		qm.Where("\"approvers\".\"pull_request_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// Commenters retrieves all the user's Users with an executor via id column.
func (o *PullRequest) Commenters(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"commenters\" on \"users\".\"id\" = \"commenters\".\"user_id\""),
		qm.Where("\"commenters\".\"pull_request_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// Idlers retrieves all the user's Users with an executor via id column.
func (o *PullRequest) Idlers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"idlers\" on \"users\".\"id\" = \"idlers\".\"user_id\""),
		qm.Where("\"idlers\".\"pull_request_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// Reviewers retrieves all the user's Users with an executor via id column.
func (o *PullRequest) Reviewers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"reviewers\" on \"users\".\"id\" = \"reviewers\".\"user_id\""),
		qm.Where("\"reviewers\".\"pull_request_id\"=?", o.ID),
	)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"users\".*"})
	}

	return query
}

// LoadAuthor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pullRequestL) LoadAuthor(ctx context.Context, e boil.ContextExecutor, singular bool, maybePullRequest interface{}, mods queries.Applicator) error {
	var slice []*PullRequest
	var object *PullRequest

	if singular {
		object = maybePullRequest.(*PullRequest)
	} else {
		slice = *maybePullRequest.(*[]*PullRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pullRequestR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pullRequestR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(pullRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Author = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AuthoredPullRequests = append(foreign.R.AuthoredPullRequests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.Author = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AuthoredPullRequests = append(foreign.R.AuthoredPullRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadApprovers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pullRequestL) LoadApprovers(ctx context.Context, e boil.ContextExecutor, singular bool, maybePullRequest interface{}, mods queries.Applicator) error {
	var slice []*PullRequest
	var object *PullRequest

	if singular {
		object = maybePullRequest.(*PullRequest)
	} else {
		slice = *maybePullRequest.(*[]*PullRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pullRequestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pullRequestR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".*, \"a\".\"pull_request_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"approvers\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"pull_request_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []int64
	for results.Next() {
		one := new(User)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Username, &one.GithubID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Approvers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.ApprovedPullRequests = append(foreign.R.ApprovedPullRequests, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Approvers = append(local.R.Approvers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ApprovedPullRequests = append(foreign.R.ApprovedPullRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadCommenters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pullRequestL) LoadCommenters(ctx context.Context, e boil.ContextExecutor, singular bool, maybePullRequest interface{}, mods queries.Applicator) error {
	var slice []*PullRequest
	var object *PullRequest

	if singular {
		object = maybePullRequest.(*PullRequest)
	} else {
		slice = *maybePullRequest.(*[]*PullRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pullRequestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pullRequestR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".*, \"a\".\"pull_request_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"commenters\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"pull_request_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []int64
	for results.Next() {
		one := new(User)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Username, &one.GithubID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Commenters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.CommentedPullRequests = append(foreign.R.CommentedPullRequests, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Commenters = append(local.R.Commenters, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CommentedPullRequests = append(foreign.R.CommentedPullRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadIdlers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pullRequestL) LoadIdlers(ctx context.Context, e boil.ContextExecutor, singular bool, maybePullRequest interface{}, mods queries.Applicator) error {
	var slice []*PullRequest
	var object *PullRequest

	if singular {
		object = maybePullRequest.(*PullRequest)
	} else {
		slice = *maybePullRequest.(*[]*PullRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pullRequestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pullRequestR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".*, \"a\".\"pull_request_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"idlers\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"pull_request_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []int64
	for results.Next() {
		one := new(User)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Username, &one.GithubID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Idlers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.IdledPullRequests = append(foreign.R.IdledPullRequests, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Idlers = append(local.R.Idlers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.IdledPullRequests = append(foreign.R.IdledPullRequests, local)
				break
			}
		}
	}

	return nil
}

// LoadReviewers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pullRequestL) LoadReviewers(ctx context.Context, e boil.ContextExecutor, singular bool, maybePullRequest interface{}, mods queries.Applicator) error {
	var slice []*PullRequest
	var object *PullRequest

	if singular {
		object = maybePullRequest.(*PullRequest)
	} else {
		slice = *maybePullRequest.(*[]*PullRequest)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pullRequestR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pullRequestR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"users\".*, \"a\".\"pull_request_id\""),
		qm.From("\"users\""),
		qm.InnerJoin("\"reviewers\" as \"a\" on \"users\".\"id\" = \"a\".\"user_id\""),
		qm.WhereIn("\"a\".\"pull_request_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User

	var localJoinCols []int64
	for results.Next() {
		one := new(User)
		var localJoinCol int64

		err = results.Scan(&one.ID, &one.Username, &one.GithubID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for users")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice users")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Reviewers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.RequestedReviews = append(foreign.R.RequestedReviews, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Reviewers = append(local.R.Reviewers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RequestedReviews = append(foreign.R.RequestedReviews, local)
				break
			}
		}
	}

	return nil
}

// SetAuthor of the pullRequest to the related item.
// Sets o.R.Author to related.
// Adds o to related.R.AuthoredPullRequests.
func (o *PullRequest) SetAuthor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pull_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, pullRequestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &pullRequestR{
			Author: related,
		}
	} else {
		o.R.Author = related
	}

	if related.R == nil {
		related.R = &userR{
			AuthoredPullRequests: PullRequestSlice{o},
		}
	} else {
		related.R.AuthoredPullRequests = append(related.R.AuthoredPullRequests, o)
	}

	return nil
}

// AddApprovers adds the given related objects to the existing relationships
// of the pull_request, optionally inserting them as new records.
// Appends related to o.R.Approvers.
// Sets related.R.ApprovedPullRequests appropriately.
func (o *PullRequest) AddApprovers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"approvers\" (\"pull_request_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &pullRequestR{
			Approvers: related,
		}
	} else {
		o.R.Approvers = append(o.R.Approvers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				ApprovedPullRequests: PullRequestSlice{o},
			}
		} else {
			rel.R.ApprovedPullRequests = append(rel.R.ApprovedPullRequests, o)
		}
	}
	return nil
}

// SetApprovers removes all previously related items of the
// pull_request replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ApprovedPullRequests's Approvers accordingly.
// Replaces o.R.Approvers with related.
// Sets related.R.ApprovedPullRequests's Approvers accordingly.
func (o *PullRequest) SetApprovers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from \"approvers\" where \"pull_request_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeApproversFromApprovedPullRequestsSlice(o, related)
	if o.R != nil {
		o.R.Approvers = nil
	}
	return o.AddApprovers(ctx, exec, insert, related...)
}

// RemoveApprovers relationships from objects passed in.
// Removes related items from R.Approvers (uses pointer comparison, removal does not keep order)
// Sets related.R.ApprovedPullRequests.
func (o *PullRequest) RemoveApprovers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"approvers\" where \"pull_request_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeApproversFromApprovedPullRequestsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Approvers {
			if rel != ri {
				continue
			}

			ln := len(o.R.Approvers)
			if ln > 1 && i < ln-1 {
				o.R.Approvers[i] = o.R.Approvers[ln-1]
			}
			o.R.Approvers = o.R.Approvers[:ln-1]
			break
		}
	}

	return nil
}

func removeApproversFromApprovedPullRequestsSlice(o *PullRequest, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ApprovedPullRequests {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ApprovedPullRequests)
			if ln > 1 && i < ln-1 {
				rel.R.ApprovedPullRequests[i] = rel.R.ApprovedPullRequests[ln-1]
			}
			rel.R.ApprovedPullRequests = rel.R.ApprovedPullRequests[:ln-1]
			break
		}
	}
}

// AddCommenters adds the given related objects to the existing relationships
// of the pull_request, optionally inserting them as new records.
// Appends related to o.R.Commenters.
// Sets related.R.CommentedPullRequests appropriately.
func (o *PullRequest) AddCommenters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"commenters\" (\"pull_request_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &pullRequestR{
			Commenters: related,
		}
	} else {
		o.R.Commenters = append(o.R.Commenters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				CommentedPullRequests: PullRequestSlice{o},
			}
		} else {
			rel.R.CommentedPullRequests = append(rel.R.CommentedPullRequests, o)
		}
	}
	return nil
}

// SetCommenters removes all previously related items of the
// pull_request replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CommentedPullRequests's Commenters accordingly.
// Replaces o.R.Commenters with related.
// Sets related.R.CommentedPullRequests's Commenters accordingly.
func (o *PullRequest) SetCommenters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from \"commenters\" where \"pull_request_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeCommentersFromCommentedPullRequestsSlice(o, related)
	if o.R != nil {
		o.R.Commenters = nil
	}
	return o.AddCommenters(ctx, exec, insert, related...)
}

// RemoveCommenters relationships from objects passed in.
// Removes related items from R.Commenters (uses pointer comparison, removal does not keep order)
// Sets related.R.CommentedPullRequests.
func (o *PullRequest) RemoveCommenters(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"commenters\" where \"pull_request_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeCommentersFromCommentedPullRequestsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Commenters {
			if rel != ri {
				continue
			}

			ln := len(o.R.Commenters)
			if ln > 1 && i < ln-1 {
				o.R.Commenters[i] = o.R.Commenters[ln-1]
			}
			o.R.Commenters = o.R.Commenters[:ln-1]
			break
		}
	}

	return nil
}

func removeCommentersFromCommentedPullRequestsSlice(o *PullRequest, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.CommentedPullRequests {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.CommentedPullRequests)
			if ln > 1 && i < ln-1 {
				rel.R.CommentedPullRequests[i] = rel.R.CommentedPullRequests[ln-1]
			}
			rel.R.CommentedPullRequests = rel.R.CommentedPullRequests[:ln-1]
			break
		}
	}
}

// AddIdlers adds the given related objects to the existing relationships
// of the pull_request, optionally inserting them as new records.
// Appends related to o.R.Idlers.
// Sets related.R.IdledPullRequests appropriately.
func (o *PullRequest) AddIdlers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"idlers\" (\"pull_request_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &pullRequestR{
			Idlers: related,
		}
	} else {
		o.R.Idlers = append(o.R.Idlers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				IdledPullRequests: PullRequestSlice{o},
			}
		} else {
			rel.R.IdledPullRequests = append(rel.R.IdledPullRequests, o)
		}
	}
	return nil
}

// SetIdlers removes all previously related items of the
// pull_request replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IdledPullRequests's Idlers accordingly.
// Replaces o.R.Idlers with related.
// Sets related.R.IdledPullRequests's Idlers accordingly.
func (o *PullRequest) SetIdlers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from \"idlers\" where \"pull_request_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeIdlersFromIdledPullRequestsSlice(o, related)
	if o.R != nil {
		o.R.Idlers = nil
	}
	return o.AddIdlers(ctx, exec, insert, related...)
}

// RemoveIdlers relationships from objects passed in.
// Removes related items from R.Idlers (uses pointer comparison, removal does not keep order)
// Sets related.R.IdledPullRequests.
func (o *PullRequest) RemoveIdlers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"idlers\" where \"pull_request_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeIdlersFromIdledPullRequestsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Idlers {
			if rel != ri {
				continue
			}

			ln := len(o.R.Idlers)
			if ln > 1 && i < ln-1 {
				o.R.Idlers[i] = o.R.Idlers[ln-1]
			}
			o.R.Idlers = o.R.Idlers[:ln-1]
			break
		}
	}

	return nil
}

func removeIdlersFromIdledPullRequestsSlice(o *PullRequest, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.IdledPullRequests {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.IdledPullRequests)
			if ln > 1 && i < ln-1 {
				rel.R.IdledPullRequests[i] = rel.R.IdledPullRequests[ln-1]
			}
			rel.R.IdledPullRequests = rel.R.IdledPullRequests[:ln-1]
			break
		}
	}
}

// AddReviewers adds the given related objects to the existing relationships
// of the pull_request, optionally inserting them as new records.
// Appends related to o.R.Reviewers.
// Sets related.R.RequestedReviews appropriately.
func (o *PullRequest) AddReviewers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"reviewers\" (\"pull_request_id\", \"user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &pullRequestR{
			Reviewers: related,
		}
	} else {
		o.R.Reviewers = append(o.R.Reviewers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				RequestedReviews: PullRequestSlice{o},
			}
		} else {
			rel.R.RequestedReviews = append(rel.R.RequestedReviews, o)
		}
	}
	return nil
}

// SetReviewers removes all previously related items of the
// pull_request replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RequestedReviews's Reviewers accordingly.
// Replaces o.R.Reviewers with related.
// Sets related.R.RequestedReviews's Reviewers accordingly.
func (o *PullRequest) SetReviewers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "delete from \"reviewers\" where \"pull_request_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeReviewersFromRequestedReviewsSlice(o, related)
	if o.R != nil {
		o.R.Reviewers = nil
	}
	return o.AddReviewers(ctx, exec, insert, related...)
}

// RemoveReviewers relationships from objects passed in.
// Removes related items from R.Reviewers (uses pointer comparison, removal does not keep order)
// Sets related.R.RequestedReviews.
func (o *PullRequest) RemoveReviewers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"reviewers\" where \"pull_request_id\" = $1 and \"user_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeReviewersFromRequestedReviewsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Reviewers {
			if rel != ri {
				continue
			}

			ln := len(o.R.Reviewers)
			if ln > 1 && i < ln-1 {
				o.R.Reviewers[i] = o.R.Reviewers[ln-1]
			}
			o.R.Reviewers = o.R.Reviewers[:ln-1]
			break
		}
	}

	return nil
}

func removeReviewersFromRequestedReviewsSlice(o *PullRequest, related []*User) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.RequestedReviews {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.RequestedReviews)
			if ln > 1 && i < ln-1 {
				rel.R.RequestedReviews[i] = rel.R.RequestedReviews[ln-1]
			}
			rel.R.RequestedReviews = rel.R.RequestedReviews[:ln-1]
			break
		}
	}
}

// PullRequests retrieves all the records using an executor.
func PullRequests(mods ...qm.QueryMod) pullRequestQuery {
	mods = append(mods, qm.From("\"pull_requests\""))
	return pullRequestQuery{NewQuery(mods...)}
}

// FindPullRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPullRequest(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*PullRequest, error) {
	pullRequestObj := &PullRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pull_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pullRequestObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pull_requests")
	}

	return pullRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PullRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pull_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pullRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pullRequestInsertCacheMut.RLock()
	cache, cached := pullRequestInsertCache[key]
	pullRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pullRequestColumns,
			pullRequestColumnsWithDefault,
			pullRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pullRequestType, pullRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pullRequestType, pullRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pull_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pull_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pull_requests")
	}

	if !cached {
		pullRequestInsertCacheMut.Lock()
		pullRequestInsertCache[key] = cache
		pullRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PullRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PullRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pullRequestUpdateCacheMut.RLock()
	cache, cached := pullRequestUpdateCache[key]
	pullRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pullRequestColumns,
			pullRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pull_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pull_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pullRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pullRequestType, pullRequestMapping, append(wl, pullRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pull_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pull_requests")
	}

	if !cached {
		pullRequestUpdateCacheMut.Lock()
		pullRequestUpdateCache[key] = cache
		pullRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pullRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pull_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pull_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PullRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pullRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pull_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pullRequestPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pullRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pullRequest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PullRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pull_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pullRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pullRequestUpsertCacheMut.RLock()
	cache, cached := pullRequestUpsertCache[key]
	pullRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pullRequestColumns,
			pullRequestColumnsWithDefault,
			pullRequestColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pullRequestColumns,
			pullRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pull_requests, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pullRequestPrimaryKeyColumns))
			copy(conflict, pullRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pull_requests\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pullRequestType, pullRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pullRequestType, pullRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pull_requests")
	}

	if !cached {
		pullRequestUpsertCacheMut.Lock()
		pullRequestUpsertCache[key] = cache
		pullRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PullRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PullRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PullRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pullRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"pull_requests\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pull_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pull_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pullRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pullRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pull_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pull_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PullRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PullRequest slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(pullRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pullRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pull_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pullRequestPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pullRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pull_requests")
	}

	if len(pullRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PullRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPullRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PullRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PullRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pullRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pull_requests\".* FROM \"pull_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pullRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PullRequestSlice")
	}

	*o = slice

	return nil
}

// PullRequestExists checks if the PullRequest row exists.
func PullRequestExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pull_requests\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pull_requests exists")
	}

	return exists, nil
}
