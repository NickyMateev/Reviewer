// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPullRequests(t *testing.T) {
	t.Parallel()

	query := PullRequests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPullRequestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PullRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPullRequestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PullRequests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PullRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPullRequestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PullRequestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PullRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPullRequestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PullRequestExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PullRequest exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PullRequestExists to return true, but got false.")
	}
}

func testPullRequestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pullRequestFound, err := FindPullRequest(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pullRequestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPullRequestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PullRequests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPullRequestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PullRequests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPullRequestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pullRequestOne := &PullRequest{}
	pullRequestTwo := &PullRequest{}
	if err = randomize.Struct(seed, pullRequestOne, pullRequestDBTypes, false, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, pullRequestTwo, pullRequestDBTypes, false, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pullRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pullRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PullRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPullRequestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pullRequestOne := &PullRequest{}
	pullRequestTwo := &PullRequest{}
	if err = randomize.Struct(seed, pullRequestOne, pullRequestDBTypes, false, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, pullRequestTwo, pullRequestDBTypes, false, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pullRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pullRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PullRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pullRequestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PullRequest) error {
	*o = PullRequest{}
	return nil
}

func pullRequestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PullRequest) error {
	*o = PullRequest{}
	return nil
}

func pullRequestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PullRequest) error {
	*o = PullRequest{}
	return nil
}

func pullRequestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PullRequest) error {
	*o = PullRequest{}
	return nil
}

func pullRequestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PullRequest) error {
	*o = PullRequest{}
	return nil
}

func pullRequestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PullRequest) error {
	*o = PullRequest{}
	return nil
}

func pullRequestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PullRequest) error {
	*o = PullRequest{}
	return nil
}

func pullRequestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PullRequest) error {
	*o = PullRequest{}
	return nil
}

func pullRequestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PullRequest) error {
	*o = PullRequest{}
	return nil
}

func testPullRequestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PullRequest{}
	o := &PullRequest{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pullRequestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PullRequest object: %s", err)
	}

	AddPullRequestHook(boil.BeforeInsertHook, pullRequestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pullRequestBeforeInsertHooks = []PullRequestHook{}

	AddPullRequestHook(boil.AfterInsertHook, pullRequestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pullRequestAfterInsertHooks = []PullRequestHook{}

	AddPullRequestHook(boil.AfterSelectHook, pullRequestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pullRequestAfterSelectHooks = []PullRequestHook{}

	AddPullRequestHook(boil.BeforeUpdateHook, pullRequestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pullRequestBeforeUpdateHooks = []PullRequestHook{}

	AddPullRequestHook(boil.AfterUpdateHook, pullRequestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pullRequestAfterUpdateHooks = []PullRequestHook{}

	AddPullRequestHook(boil.BeforeDeleteHook, pullRequestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pullRequestBeforeDeleteHooks = []PullRequestHook{}

	AddPullRequestHook(boil.AfterDeleteHook, pullRequestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pullRequestAfterDeleteHooks = []PullRequestHook{}

	AddPullRequestHook(boil.BeforeUpsertHook, pullRequestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pullRequestBeforeUpsertHooks = []PullRequestHook{}

	AddPullRequestHook(boil.AfterUpsertHook, pullRequestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pullRequestAfterUpsertHooks = []PullRequestHook{}
}

func testPullRequestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PullRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPullRequestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pullRequestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PullRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPullRequestToManyApprovers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"approvers\" (\"pull_request_id\", \"user_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"approvers\" (\"pull_request_id\", \"user_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Approvers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PullRequestSlice{&a}
	if err = a.L.LoadApprovers(ctx, tx, false, (*[]*PullRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Approvers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Approvers = nil
	if err = a.L.LoadApprovers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Approvers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPullRequestToManyCommenters(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"commenters\" (\"pull_request_id\", \"user_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"commenters\" (\"pull_request_id\", \"user_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Commenters().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PullRequestSlice{&a}
	if err = a.L.LoadCommenters(ctx, tx, false, (*[]*PullRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Commenters); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Commenters = nil
	if err = a.L.LoadCommenters(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Commenters); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPullRequestToManyIdlers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"idlers\" (\"pull_request_id\", \"user_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"idlers\" (\"pull_request_id\", \"user_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Idlers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PullRequestSlice{&a}
	if err = a.L.LoadIdlers(ctx, tx, false, (*[]*PullRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Idlers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Idlers = nil
	if err = a.L.LoadIdlers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Idlers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPullRequestToManyAddOpApprovers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddApprovers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.ApprovedPullRequests[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.ApprovedPullRequests[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Approvers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Approvers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Approvers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPullRequestToManySetOpApprovers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetApprovers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Approvers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetApprovers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Approvers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.ApprovedPullRequests) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.ApprovedPullRequests) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.ApprovedPullRequests[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.ApprovedPullRequests[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Approvers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Approvers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPullRequestToManyRemoveOpApprovers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddApprovers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Approvers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveApprovers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Approvers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.ApprovedPullRequests) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.ApprovedPullRequests) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.ApprovedPullRequests[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ApprovedPullRequests[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Approvers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Approvers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Approvers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPullRequestToManyAddOpCommenters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCommenters(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.CommentedPullRequests[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.CommentedPullRequests[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Commenters[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Commenters[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Commenters().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPullRequestToManySetOpCommenters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCommenters(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Commenters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCommenters(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Commenters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.CommentedPullRequests) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.CommentedPullRequests) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.CommentedPullRequests[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.CommentedPullRequests[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Commenters[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Commenters[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPullRequestToManyRemoveOpCommenters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCommenters(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Commenters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCommenters(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Commenters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.CommentedPullRequests) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.CommentedPullRequests) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.CommentedPullRequests[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CommentedPullRequests[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Commenters) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Commenters[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Commenters[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPullRequestToManyAddOpIdlers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIdlers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.IdledPullRequests[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.IdledPullRequests[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Idlers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Idlers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Idlers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPullRequestToManySetOpIdlers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetIdlers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Idlers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetIdlers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Idlers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.IdledPullRequests) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.IdledPullRequests) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.IdledPullRequests[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.IdledPullRequests[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Idlers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Idlers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPullRequestToManyRemoveOpIdlers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddIdlers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Idlers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveIdlers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Idlers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.IdledPullRequests) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.IdledPullRequests) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.IdledPullRequests[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.IdledPullRequests[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Idlers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Idlers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Idlers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPullRequestToOneUserUsingAuthor(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PullRequest
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Author().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PullRequestSlice{&local}
	if err = local.L.LoadAuthor(ctx, tx, false, (*[]*PullRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Author = nil
	if err = local.L.LoadAuthor(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Author == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPullRequestToOneSetOpUserUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetAuthor(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Author != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AuthoredPullRequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testPullRequestToOneRemoveOpUserUsingAuthor(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PullRequest
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pullRequestDBTypes, false, strmangle.SetComplement(pullRequestPrimaryKeyColumns, pullRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAuthor(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAuthor(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Author().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Author != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AuthoredPullRequests) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPullRequestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPullRequestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PullRequestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPullRequestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PullRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pullRequestDBTypes = map[string]string{`ID`: `integer`, `UserID`: `integer`, `Title`: `character varying`, `URL`: `character varying`, `GithubID`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testPullRequestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pullRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pullRequestColumns) == len(pullRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PullRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPullRequestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pullRequestColumns) == len(pullRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PullRequest{}
	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PullRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pullRequestDBTypes, true, pullRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pullRequestColumns, pullRequestPrimaryKeyColumns) {
		fields = pullRequestColumns
	} else {
		fields = strmangle.SetComplement(
			pullRequestColumns,
			pullRequestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PullRequestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPullRequestsUpsert(t *testing.T) {
	t.Parallel()

	if len(pullRequestColumns) == len(pullRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PullRequest{}
	if err = randomize.Struct(seed, &o, pullRequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PullRequest: %s", err)
	}

	count, err := PullRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pullRequestDBTypes, false, pullRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PullRequest struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PullRequest: %s", err)
	}

	count, err = PullRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
